enum keycodes {
  KEY__=0,
  KEY_errorRollOver,
  KEY_POSTfail,
  KEY_errorUndefined,
  KEY_A,        // 4
  KEY_B,
  KEY_C,
  KEY_D,
  KEY_E,
  KEY_F,
  KEY_G,
  KEY_H,
  KEY_I,
  KEY_J,
  KEY_K,
  KEY_L,
  KEY_M,        // 0x10
  KEY_N,
  KEY_O,
  KEY_P,
  KEY_Q,
  KEY_R,
  KEY_S,
  KEY_T,
  KEY_U,
  KEY_V,
  KEY_W,
  KEY_X,
  KEY_Y,
  KEY_Z,
  KEY_1,
  KEY_2,
  KEY_3,        // 0x20
  KEY_4,
  KEY_5,
  KEY_6,
  KEY_7,
  KEY_8,
  KEY_9,
  KEY_0,        // 0x27
  KEY_enter,
  KEY_esc,
  KEY_bckspc,   // backspace
  KEY_tab,
  KEY_spc,      // space
  KEY_minus,    // - (and _)
  KEY_equal,    // = (and +)
  KEY_lbr,      // [
  KEY_rbr,      // ]  -- 0x30
  KEY_bckslsh,  // \ (and |)
  KEY_hash,     // Non-US # and ~
  KEY_smcol,    // ; (and :)
  KEY_ping,     // ' and "
  KEY_grave,    // Grave accent and tilde
  KEY_comma,    // , (and <)
  KEY_dot,      // . (and >)
  KEY_slash,    // / (and ?)
  KEY_cpslck,   // capslock
  KEY_F1,
  KEY_F2,
  KEY_F3,
  KEY_F4,
  KEY_F5,
  KEY_F6,
  KEY_F7,       // 0x40
  KEY_F8,
  KEY_F9,
  KEY_F10,
  KEY_F11,
  KEY_F12,
  KEY_PrtScr,
  KEY_scrlck,
  KEY_break,
  KEY_ins,
  KEY_home,
  KEY_pgup,
  KEY_del,
  KEY_end,
  KEY_pgdn,
  KEY_rarr,
  KEY_larr,     // 0x50
  KEY_darr,
  KEY_uarr,
  KEY_numlock,
  KEY_KPslash,
  KEY_KPast,
  KEY_KPminus,
  KEY_KPplus,
  KEY_KPenter,
  KEY_KP1,
  KEY_KP2,
  KEY_KP3,
  KEY_KP4,
  KEY_KP5,
  KEY_KP6,
  KEY_KP7,
  KEY_KP8,      // 0x60
  KEY_KP9,
  KEY_KP0,
  KEY_KPcomma,
  KEY_Euro2,

  /* These are NOT standard USB HID - handled specially in decoding,
     so they will be mapped to the modifier byte in the USB report */
  KEY_Modifiers,
  MOD_LCTRL,    // 0x01
  MOD_LSHIFT,   // 0x02
  MOD_LALT,     // 0x04
  MOD_LGUI,     // 0x08
  MOD_RCTRL,    // 0x10
  MOD_RSHIFT,   // 0x20
  MOD_RALT,     // 0x40
  MOD_RGUI,     // 0x80

  /* Other keys that need special handling -
     These are looked up in the table spec_keys because they do not
     generate the same scan-code in the shifted and unshifted state,
     and some may need to alter the shift-state to generate the
     correct character code on the PC */
  KEY_Special,
  SPC_2,
  SPC_6,
  SPC_7,
  SPC_8,
  SPC_9,
  SPC_0,
  SPC_plus,
  SPC_minus,
  SPC_pound,
  SPC_home,
  SPC_del,
  SPC_ast,
  SPC_equal,
  SPC_crsrud,
  SPC_crsrlr,
  SPC_F1,
  SPC_F3,
  SPC_F5,
  SPC_F7,
  SPC_hat,
  SPC_colon,
  SPC_smcol,
  SPC_at
};


//LCL                		    `    a    b    c    d    e    f    g    h    i    j    k    l    m    n    o
PROGMEM const byte Lowr1[16] = {0x35,KEY_A,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12};
//LCU			       	    	 p    q    r    s    t    u    v    w    x    y    z    {    _    }    ~   CNTR (Ctrl)
PROGMEM const byte Lowr2[16] = {0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0xDB,0xDC,0xDD,0xC0,0x00};

//HCL                   		 @    A    B    C    D    E    F    G    H    I    J    K    L    M    N    O
PROGMEM const byte Uppr1[16] = {0x35,KEY_A,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12};
//HCU             			       P    Q    R    S    T    U    V    W    X    Y    Z    [    \    ]   ENDL ENDP
PROGMEM const byte Uppr2[16] = {0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0xDB,0xDC,0xDD,0x23,0x00};

//NUM            		        0    1    2    3    4    5    6    7    8    9    :    ;    <    =    >    ?
PROGMEM const byte Numbr[16] = {0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xBA,0xBA,0xBC,0xBB,0xBE,0xBF};
//SYM           		        SPC   !    "    #    $    %    &    '    (    )    *    +    ,    -    .    /
PROGMEM const byte Symbl[16] = {0x20,0x31,0xDE,0x33,0x34,0x35,0x37,0x27,0x39,0x30,0x38,0x2B,0xBC,0xDC,0xBE,0xBF};

//   Binding:    		        SUPR TAB  ESC  DEL                          Insrt      PGUP FMOD PGDN BKSP
//               		        BLUE TAB  CNCL ERAP ERAL PINK C+P  LBLU WHIT INSR COLR BLFT TRAN BRGT RTN  CTRL+CNCL
PROGMEM const byte Ctrl1[16] = {0x00,0x09,0x1B,0x2E,0x00,0x00,0x00,0x00,0x00,0xD2,0x00,0x21,0x00,0x22,0x08,0x00};

//   Binding:     		       SHFT      HOME      ALT                 RGHY      DOWN           ENTR LEFT  UP
//                 		      CHAN C+Q  HOME C+C  ALPA BLAK RED  GREN RGHT C+Y  DOWN C+K  YELO  CR  LEFT  UP
PROGMEM const byte Ctrl2[16] = {0x00,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x27,0x00,0x28,0x00,0x00,0x0D,0x25,0x26};
//


//FMOD TABLES

//LCL              			       `    a    b    c    d    F15  f    g    h    F20  j    k    l    m    n    F21
PROGMEM const byte FLowr1[16] = {0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x83,0x00,0x00,0x00,0x00,0x00,0x84};
//LCU         		              F22  F13  F16  s    F17  F19  v    F14  x    F18  z    {    F24  }    F12 CNTR (Ctrl)
PROGMEM const byte FLowr2[16] = {0x85,0x7C,0x7F,0x00,0x80,0x82,0x00,0x7D,0x00,0x81,0x00,0x00,0x87,0x00,0x7B,0x00};

//HCL          					    @    A    B    C    D    E    F    G    H    I    J    K    L    M    N    O
PROGMEM const byte FUppr1[16] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//HCU      					        P    Q    R    S    T    U    V    W    X    Y    Z    [    \    ]   ENDL ENDP
PROGMEM const byte FUppr2[16] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

//NUM         		              F10   F1   F2   F3   F4   F5   F6   F7   F8   F9   F23   ;    <    =    >    ?
PROGMEM const byte FNumbr[16] = {0x79,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x86,0x00,0x00,0x00,0x00,0x00};
//SYM             		          SPC  !    "    #    $    %    &    '    (    )    *    +    ,    F11  .    /
PROGMEM const byte FSymbl[16] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7A,0x00,0x00};

//   Binding:    			     SUPR TAB  ESC  DEL                          Insrt      PGUP FMOD PGDN BKSP
//              			     BLUE TAB  CNCL ERAP ERAL PINK C+P  LBLU WHIT INSR COLR BLFT TRAN BRGT RTN  CTRL+CNCL
PROGMEM const byte FCtrl1[16] = {0x00,0x09,0x1B,0x2E,0x00,0x00,0x00,0x00,0x00,0xD2,0x00,0x21,0x00,0x22,0x08,0x00};

//   Binding:   		         SHFT      HOME      ALT                 RGHY      DOWN           ENTR LEFT  UP
//               		         CHAN C+Q  HOME C+C  ALPA BLAK RED  GREN RGHT C+Y  DOWN C+K YELO  CR   LEFT  UP
PROGMEM const byte FCtrl2[16] = {0x00,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x27,0x00,0x28,0x00,0x00,0x0D,0x25,0x26};

